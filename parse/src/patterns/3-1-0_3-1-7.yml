# Captures:
#   ver: version / release (i.e. "3.1.1")
#   plat: platform (i.e. ".NET"
#   os: OS (i.e. "Microsoft Windows 10.0.22621")
#   build: build number (i.e. "3" for 3.1.1-3)
#   commit: combined commit string (i.e. "d8a2f91+3050eba")
platforms:
  # Vanilla
  - version: "---- CouchbaseLite/(?<ver>\\d+.\\d+.\\d+).+\\((?<plat>\\S+); (?<os>.*)\\) Build/(?<build>\\d+) LiteCore/\\d+.\\d+.\\d+ \\(\\d+\\) Commit/(?<commit>\\S+) ----"
    timestamp: "(?<ts>\\d{2}:\\d{2}:\\d{2}.\\d+)\\|"
    full_timestamp: false
    timestamp_formats:
      - "%H:%M:%S.%6f"
    domain: "\\d+\\| \\[(?<domain>\\w+)\\]: "
    level_names:
      error: "error"
      warn: "warning"
      info: "info"
      verbose: "verbose"
      debug: "debug"
# Captures
#   obj: Object name (i.e. "Repl")
#   id: Object ID
object: ": \\{(?<obj>\\w+)#(?<id>\\d+)\\}"

events:
  db_open:
    regex: "Opening database"
  db_upgrade:
    regex: "SCHEMA UPGRADE \\((?<old_ver>\\d+)-(?<new_ver>\\d+)\\)"
    captures:
      old_ver: Int # Old schema version
      new_ver: Int # New schema version
  db_tx_begin:
    regex: "begin transaction"
  db_tx_commit:
    regex: "commit transaction"
  db_tx_abort:
    regex: "abort transaction"
  db_saved_rev:
    regex: "Saved '(?<doc_id>\\S+)' rev (?<rev_id>\\S+) as seq (?<sequence>\\d+)"
    captures:
      doc_id: String # Document ID
      rev_id: String # Revision ID
      sequence: Int # Sequence number
  connection_receiving_message:
    regex: "\\{Connection#\\d+\\} Receiving '(?<message>\\w+)' (?<message_type>\\w+) #(?<id>\\d+)"
    captures:
      message: String # Message name
      message_type: String # Message type
      id: Int # Message ID
  connection_received_message:
    regex: "\\{Connection#\\d+\\} Finished receiving '(?<message>\\w+)' (?<message_type>\\w+) #(?<id>\\d+)"
    captures:
      message: String # Message name
      message_type: String # Message type
      id: Int # Message ID
  housekeeper_monitor:
    regex: "Housekeeper: opening background database"
  repl_conflict_scan:
    regex: "Found (?<num_conflicts>\\d+) conflicted docs in"
    captures:
      num_conflicts: Int # Number of conflicts
  repl_connected:
    regex: "Connected!"
  repl_activity_update:
    regex: "activityLevel=(?<activity>\\S+): connectionState=(?<connection_state>\\d), savingChkpt=(?<saving_checkpoint>\\d+)"
    captures:
      activity: String # Activity level
      connection_state: Int # BLIP Connection state
      saving_checkpoint: Bool # Whether the repl needs to save a checkpoint
  repl_status_update:
    regex: "pushStatus=(?<push_status>\\S+), pullStatus=(?<pull_status>\\S+), progress=(?<completed>\\d+)/(?<total>\\d+)/(?<doc_count>\\d+)"
    captures:
      push_status: String # Push status
      pull_status: String # Pull status
      completed: Int # Number of completed items
      total: Int # Total number of items
      doc_count: Int # Number of documents
  subrepl_start:
    regex: "Starting (?<mode>\\w+) from remote seq '(?<sequence>\\d+)'"
    captures:
      mode: String # Replication mode ('push' or 'pull')
      sequence: Int # Sequence number
  puller_handled_revs:
    regex: "\\{Puller#\\d+\\} (?<handled>\\d+) revs were provisionally handled; down to (?<pending>\\d+) active"
    captures:
      handled: Int # Number of handled revisions
      pending: Int # Number of pending revisions
  incoming_rev_received:
    regex: "\\{IncomingRev#\\d+\\} \\{Coll#\\d+\\} Received revision '(?<doc_id>\\S+)' #(?<rev_id>\\S+) \\(seq '(?<sequence>\\d+)'\\)"
    captures:
      doc_id: String # Document ID
      rev_id: String # Revision ID
      sequence: Int # Sequence number
  inserter_inserting_revs:
    regex: "\\{Inserter#\\d+\\} \\{Coll#\\d+\\} Inserting (?<num_revs>\\d+) revs:"
    captures:
      num_revs: Int # Number of revisions
  inserter_insert_rev:
    regex: "\\{'(?<doc_id>\\S+) \\((?<collection>\\S+)\\)' #(?<rev_id>\\S+) <- (?<rev_history>\\S*)\\} seq (?<sequence>\\d+)"
    captures:
      doc_id: String # Document ID
      collection: String # Either 'scope.collection', or '_default' for default collection
      rev_id: String # Revision ID
      rev_history: String # Revision history
      sequence: Int # Sequence number
  blip_send_request_start:
    regex: "Sending '(?<request>\\w+)' REQ #(?<id>\\d+)"
    captures:
      request: String # Request type
      id: Int # Request ID
  blip_queue_request:
    regex: "Requeuing REQ #(?<id>\\d+)"
    captures:
      id: Int # Request ID
  blip_ws_write_start:
    regex: "Starting writeToWebSocket loop..."
  blip_send_frame:
    regex: "Sending frame: (?<message_type>\\w+) #(?<id>\\d+) (?<more_coming>M|-)(?<urgent>U|-)(?<no_reply>N|-)(?<compressed>C|-), bytes (?<from_byte>\\d+)--(?<to_byte>\\d+)"
    captures:
      id: Int # Request ID
      message_type: String # Message type (i.e. "REQ", "RES", "ERR")
      more_coming: Char # Whether more frames are coming
      urgent: Char # Whether the message is urgent
      no_reply: Char # Whether the message expects no reply
      compressed: Char # Whether the message is compressed
      from_byte: Int # Starting byte
      to_byte: Int # Ending byte
  blip_send_request_end:
    regex: "Finished sending REQ #(?<id>\\d+)"
    captures:
      id: Int # Request ID
  blip_ws_write_end:
    regex: "...Wrote (?<bytes>\\d+) bytes to WebSocket \\(writeable=(?<writeable>\\d)\\)"
    captures:
      bytes: Int # Number of bytes written
      writeable: Bool # Whether the WebSocket is writeable
  blip_receive_frame:
    regex: "Received frame: (?<message_type>\\w+) #(?<id>\\d+) (?<more_coming>M|-)(?<urgent>U|-)(?<no_reply>N|-)(?<compressed>C|-), length\\s+(?<length>\\d+)"
    captures:
      id: Int # Message ID
      message_type: String # Message type (i.e. "REQ", "RES", "ERR")
      more_coming: Char # Whether more frames are coming
      urgent: Char # Whether the message is urgent
      no_reply: Char # Whether the message expects no reply
      compressed: Char # Whether the message is compressed
      length: Int # Length of the message
  socket_received_message:
    regex: "\\{C4SocketImpl#\\d+\\} Received (?<length>\\d+)-byte message"
    captures:
      length: Int # Length of the message in bytes
